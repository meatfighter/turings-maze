Turing’s Maze 

Abstract 

Turing’s Maze is a discrete-event simulation of a mouse on a two-dimensional square lattice of black, gray, red, and green cells. As the mouse interacts with cells per a very simple set of rules, behaviors emerge particularly suited for emulating Boolean circuits. Consequently, it is possible to implement any algorithm as a maze traversed by the mouse.  

This article describes the rules of Turing’s Maze. It explains how to build gates, combinational logic, and sequential logic. And it demonstrates the mouse’s ability to compute with an implementation of the Mandelbrot algorithm. 

Description 

Each simulation state consists of the mouse on a cell, facing a cardinal direction (north, east, south, or west). Per the rules described below, the mouse’s direction and the color of the cell it is on may change. Then it steps in its direction to an adjacent cell, transitioning the simulation to the next state. 

The mouse can move to cells of any color except for gray, which act as the walls of the maze. Passages primarily consist of black cells. Red and green cells operate something like traffic lights. 

The mouse enters a maze from a lone black cell in some column of the southernmost row. It exits to a lone black cell in some column of the northernmost row: 

[ pic ] 

The mouse traverses the maze by following the right-hand rule. That is, from the start, it keeps its right hand (or paw) in contact with the wall to its right, and it follows the wall around corners as it advances. However, if it encounters a four-way intersection, it plows straight through:   

[ pic ] 

If the mouse lands on a green cell while facing east or west, it proceeds as if the cell were black: 

[ pic ]   

If the mouse lands on a red cell while facing east or west, it reverses direction: 

[ pic ] 

If the mouse lands on a red or a green cell while facing south, the cell changes to or remains as red, and the mouse turns north: 

[ pic ] 

Finally, if the mouse lands on a red or green cell while facing north, the cell changes to or remains as green, and the mouse turns south: 

[ pic ] 

Formal Definition 

The simulator repeatedly performs the following three steps until the mouse exits the maze. 

The simulator potentially changes the color of the tile the mouse is situated on and the mouse’s direction per the following pseudocode. 

[ pseudocode ] 

The simulator inspects the tiles immediately left of the mouse, in front of the mouse, and right of the mouse. It uses the table below, where 1 indicates a wall (a gray tile) and 0 indicates a passage (a nongray tile), to potentially change the mouse’s direction to remain consistent with the right-hand rule modified to ignore four-way intersections. 

[ table ] 

The simulator moves the mouse in its direction to an adjacent tile.  

Logic Gates 

The black tiles of the maze’s passages function as information channels, analogous to wires of an electronic circuit. Four-way intersections work like non-connecting, crossing wires because the mouse disregards the right-hand rule when it encounters them. 

Red and green tiles operate as both information storage elements and switching elements. Red represents logic zero and a non-conducting pathway. Green represents logic one and a conducting pathway. The mouse propagates information to red and green tiles by moving north or south on to them and potentially changing their colors. In turn, their colors permit or deny the mouse eastward and westward passage. 

 

 

Variations 

Different rules 

Reversible Turing’s Maze 

Universal Computation 

Turnmites 

 